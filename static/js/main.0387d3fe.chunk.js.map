{"version":3,"sources":["ChessBoard.tsx","ChessBoardContainer.tsx","Container.tsx","reportWebVitals.ts","index.tsx"],"names":["Square","props","style","width","backgroundColor","color","border","special","boxSizing","ChessBoard","squareWidth","squares","length","display","flexWrap","height","margin","map","row","rowIndex","Fragment","square","columnIndex","ChessBoardContainer","React","useState","setSquares","queuedChanges","setQueuedChanges","queuedChangesRef","useRef","copySquares","current","useEffect","columns","range","n","missingTile","random","column","fillChessBoard","rowStart","rowEnd","columnStart","columnEnd","intervalId","setInterval","nextChange","slice","clearInterval","randomColor","luminosity","hue","forEach","rows","leftRowEnd","Math","floor","rightRowStart","upperColumnEnd","lowerColumnStart","quadrant1","quadrant2","quadrant3","quadrant4","quadrantMissingTile","quadrants","findIndex","quadrant","findQuadrantWithMissingTile","missingTile1","missingTile2","missingTile3","missingTile4","squareTopLeft","squareTopRight","squareBottomLeft","squareBottomRight","newSquares","Container","inputSize","setInputSize","runSimulation","textAlign","textDecoration","justifyContent","disabled","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0387d3fe.chunk.js","sourcesContent":["import React from \"react\";\n\nexport interface IChessBoardSquare {\n  color: string;\n  special?: boolean;\n}\n\nexport interface IChessBoardProps {\n  squares: IChessBoardSquare[][];\n}\n\nfunction ChessBoard(props: IChessBoardProps) {\n  const squareWidth = props.squares.length && 100 / props.squares[0].length;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        height: \"800px\",\n        width: \"800px\",\n        margin: \"0 auto\",\n      }}\n    >\n      {props.squares.map((row, rowIndex) => {\n        return (\n          <React.Fragment>\n            {row.map((square, columnIndex) => {\n              return (\n                <Square\n                  key={`${rowIndex}|${columnIndex}`}\n                  width={squareWidth}\n                  color={square.color}\n                  special={square.special || false}\n                />\n              );\n            })}\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n}\n\ninterface ISquareProps {\n  width: number;\n  color: string;\n  special: boolean;\n}\n\nfunction Square(props: ISquareProps) {\n  return (\n    <div\n      style={{\n        width: `${props.width}%`,\n        backgroundColor: props.color,\n        border: `1px solid ${props.special ? \"red\" : \"black\"}`,\n        boxSizing: \"border-box\",\n      }}\n    />\n  );\n}\n\nexport default ChessBoard;\n","import React from \"react\";\nimport range from \"lodash.range\";\nimport random from \"lodash.random\";\nimport randomColor from \"randomcolor\";\n\nimport ChessBoard, { IChessBoardSquare } from \"./ChessBoard\";\n\ninterface IChessBoardContainerProps {\n  n: number;\n}\n\nfunction ChessBoardContainer(props: IChessBoardContainerProps) {\n  const [squares, setSquares] = React.useState<IChessBoardSquare[][]>([]);\n  const [queuedChanges, setQueuedChanges] = React.useState<\n    IChessBoardSquare[][][]\n  >([]);\n\n  const queuedChangesRef = React.useRef(queuedChanges);\n  queuedChangesRef.current = queuedChanges;\n\n  const reset = () => {\n    const columns = range(props.n);\n    const squares = columns.map(() => {\n      return columns.map(() => {\n        return { color: \"white\" };\n      });\n    }) as IChessBoardSquare[][];\n\n    const missingTile = {\n      row: random(props.n - 1),\n      column: random(props.n - 1),\n    };\n\n    squares[missingTile.row][missingTile.column] = {\n      color: \"black\",\n      special: true,\n    };\n    setSquares(squares);\n\n    fillChessBoard({\n      squares: copySquares(squares),\n      rowStart: 0,\n      rowEnd: squares.length - 1,\n      columnStart: 0,\n      columnEnd: squares.length - 1,\n      missingTile: missingTile!,\n    });\n\n    const intervalId = setInterval(() => {\n      if (queuedChangesRef.current.length > 0) {\n        const nextChange = queuedChangesRef.current[0];\n        setSquares(copySquares(nextChange));\n        setQueuedChanges((queuedChanges) => queuedChanges.slice(1));\n      }\n    }, 1000);\n\n    return () => {\n      setQueuedChanges([]);\n      clearInterval(intervalId);\n    };\n  };\n  React.useEffect(reset, [props.n]);\n\n  function copySquares(squares: IChessBoardSquare[][]) {\n    return squares.map((row) => row.map((square) => ({ ...square })));\n  }\n\n  const fillChessBoard = ({\n    squares,\n    rowStart,\n    rowEnd,\n    columnStart,\n    columnEnd,\n    missingTile,\n  }: fillChessBoardArguments) => {\n    let color = randomColor({ luminosity: \"random\", hue: \"random\" });\n    if (rowEnd - rowStart === 1) {\n      range(rowStart, rowEnd + 1).forEach((row) => {\n        range(columnStart, columnEnd + 1).forEach((column) => {\n          if (\n            (missingTile.row !== row || missingTile.column !== column) &&\n            squares[row][column].color === \"white\"\n          ) {\n            squares[row][column].color = color;\n          }\n        });\n      });\n      setQueuedChanges((queuedChanges) => [\n        ...queuedChanges,\n        copySquares(squares),\n      ]);\n      return copySquares(squares);\n    } else {\n      const rows = range(rowStart, rowEnd + 1);\n      const columns = range(columnStart, columnEnd + 1);\n\n      const leftRowEnd = rows[Math.floor(rows.length / 2) - 1];\n      const rightRowStart = leftRowEnd + 1;\n\n      const upperColumnEnd = columns[Math.floor(columns.length / 2) - 1];\n      const lowerColumnStart = upperColumnEnd + 1;\n\n      const quadrant1 = {\n        rowStart,\n        rowEnd: leftRowEnd,\n        columnStart,\n        columnEnd: upperColumnEnd,\n      };\n\n      const quadrant2 = {\n        rowStart: rightRowStart,\n        rowEnd,\n        columnStart,\n        columnEnd: upperColumnEnd,\n      };\n\n      const quadrant3 = {\n        rowStart,\n        rowEnd: leftRowEnd,\n        columnStart: lowerColumnStart,\n        columnEnd,\n      };\n\n      const quadrant4 = {\n        rowStart: rightRowStart,\n        rowEnd,\n        columnStart: lowerColumnStart,\n        columnEnd,\n      };\n\n      const quadrantMissingTile = findQuadrantWithMissingTile(\n        [quadrant1, quadrant2, quadrant3, quadrant4],\n        missingTile\n      );\n\n      let missingTile1 = { row: upperColumnEnd, column: leftRowEnd };\n      let missingTile2 = { row: upperColumnEnd, column: rightRowStart };\n      let missingTile3 = { row: lowerColumnStart, column: leftRowEnd };\n      let missingTile4 = { row: lowerColumnStart, column: rightRowStart };\n\n      const squareTopLeft = squares[missingTile1.row][missingTile1.column];\n      const squareTopRight = squares[missingTile2.row][missingTile2.column];\n      const squareBottomLeft = squares[missingTile3.row][missingTile3.column];\n      const squareBottomRight = squares[missingTile4.row][missingTile4.column];\n\n      if (quadrantMissingTile === 0) {\n        squareTopRight.color = color;\n        squareBottomLeft.color = color;\n        squareBottomRight.color = color;\n        missingTile1 = missingTile;\n      }\n\n      if (quadrantMissingTile === 1) {\n        squareTopLeft.color = color;\n        squareBottomLeft.color = color;\n        squareBottomRight.color = color;\n        missingTile2 = missingTile;\n      }\n\n      if (quadrantMissingTile === 2) {\n        squareTopLeft.color = color;\n        squares[missingTile2.row][missingTile2.column].color = color;\n        squares[missingTile4.row][missingTile4.column].color = color;\n        missingTile3 = missingTile;\n      }\n\n      if (quadrantMissingTile === 3) {\n        squares[missingTile1.row][missingTile1.column].color = color;\n        squares[missingTile2.row][missingTile2.column].color = color;\n        squares[missingTile3.row][missingTile3.column].color = color;\n        missingTile4 = missingTile;\n      }\n\n      setQueuedChanges((queuedChanges) => [\n        ...queuedChanges,\n        copySquares(squares),\n      ]);\n\n      let newSquares: IChessBoardSquare[][] = fillChessBoard({\n        squares: copySquares(squares),\n        rowStart: quadrant1.rowStart,\n        rowEnd: quadrant1.rowEnd,\n        columnStart: quadrant1.columnStart,\n        columnEnd: quadrant1.columnEnd,\n        missingTile: missingTile1!,\n      });\n\n      newSquares = fillChessBoard({\n        squares: newSquares,\n        rowStart: quadrant2.rowStart,\n        rowEnd: quadrant2.rowEnd,\n        columnStart: quadrant2.columnStart,\n        columnEnd: quadrant2.columnEnd,\n        missingTile: missingTile2!,\n      });\n\n      newSquares = fillChessBoard({\n        squares: newSquares,\n        rowStart: quadrant3.rowStart,\n        rowEnd: quadrant3.rowEnd,\n        columnStart: quadrant3.columnStart,\n        columnEnd: quadrant3.columnEnd,\n        missingTile: missingTile3!,\n      });\n\n      newSquares = fillChessBoard({\n        squares: newSquares,\n        rowStart: quadrant4.rowStart,\n        rowEnd: quadrant4.rowEnd,\n        columnStart: quadrant4.columnStart,\n        columnEnd: quadrant4.columnEnd,\n        missingTile: missingTile4!,\n      });\n\n      return newSquares;\n    }\n  };\n\n  return <ChessBoard squares={squares} />;\n}\n\nfunction findQuadrantWithMissingTile(\n  quadrants: quadrant[],\n  missingTile: { row: number; column: number }\n) {\n  const index = quadrants.findIndex((quadrant) => {\n    return (\n      missingTile.row >= quadrant.columnStart &&\n      missingTile.row <= quadrant.columnEnd &&\n      missingTile.column >= quadrant.rowStart &&\n      missingTile.column <= quadrant.rowEnd\n    );\n  });\n\n  return index;\n}\n\ntype fillChessBoardArguments = {\n  squares: IChessBoardSquare[][];\n  rowStart: number;\n  rowEnd: number;\n  columnStart: number;\n  columnEnd: number;\n  missingTile: { row: number; column: number };\n};\n\ntype quadrant = {\n  rowStart: number;\n  rowEnd: number;\n  columnStart: number;\n  columnEnd: number;\n};\n\nexport default ChessBoardContainer;\n","import React from \"react\";\nimport ChessBoardContainer from \"./ChessBoardContainer\";\n\nfunction Container() {\n  const [inputSize, setInputSize] = React.useState(2);\n  const [runSimulation, setRunSimulation] = React.useState(false);\n\n  return (\n    <div>\n      <h1 style={{ textAlign: \"center\", textDecoration: \"underline\" }}>\n        Defective Chess Board\n      </h1>\n      {!runSimulation && (\n        <div\n          style={{\n            margin: \"10px auto\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            width: \"20%\",\n          }}\n        >\n          <button\n            disabled={inputSize === 2}\n            onClick={() => {\n              setInputSize((inputSize) => inputSize / 2);\n            }}\n          >\n            -\n          </button>\n          <div>Number of Rows: {inputSize}</div>\n          <button\n            onClick={() => {\n              setInputSize((inputSize) => inputSize * 2);\n            }}\n          >\n            +\n          </button>\n        </div>\n      )}\n\n      <ChessBoardContainer n={inputSize} />\n    </div>\n  );\n}\n\nexport default Container;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Container from \"./Container\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Container />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}